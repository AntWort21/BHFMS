@startuml
actor "actin" as act
participant ":CheckInvoiceRequest\n<<UI>>" as view
participant PaymentController as pctrl
participant ChatController as cctrl
participant TransactionModel as tm

act -> view : openCheckInvoicePage()
view -> pctrl : getCheckInvoicePage()
pctrl -> tm : getProcessingTransaction()
alt (Transaction Found)
    pctrl <-- tm : transaction_data
    view <-- ctrl : transaction_data
    act <-- view : displayCheckInvoicePage(transaction_data) 
    alt (Approve Invoice)
        act -> view : approveInvoice()
        view -> pctrl : updateInvoiceStatus(invoice_id, response)
        pctrl -> tm : updateInvoiceStatus(invoice_id, response)

        opt (Tranfer Status is Processing Refund)
            pctrl -> tm : cancelPaymentStatus(invoice_id)
            pctrl -> cctrl : storeSpecificChatMessage(tenantId, reason)
        end
    else (Reject Invoice)
        act -> view : rejectInvoice()
        act <-- view : displayReasonBox()
        act -> view : giveRejectionReason()
        
        view -> pctrl : updateInvoiceStatus(invoice_id, response, reason)
        pctrl -> cctrl : sendMessage(tenantId, reason)
        pctrl -> tm : updateInvoiceStatus(invoice_id, response)

        opt (Tranfer Status is Processing Refund)
            pctrl -> tm : cancelPaymentStatus(invoice_id)
        end
    end
else (Transaction Not Found)
    
@enduml
